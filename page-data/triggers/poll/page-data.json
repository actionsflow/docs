{"componentChunkName":"component---src-templates-docs-js","path":"/triggers/poll/","result":{"data":{"site":{"siteMetadata":{"title":"Actionsflow Documentation","docsLocation":"https://github.com/actionsflow/actionsflow/tree/main"}},"mdx":{"fields":{"id":"b18f43ef-4324-5c9b-b620-0f0e898adcbe","title":"Poll","slug":"/triggers/poll/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Poll\",\n  \"metaTitle\": \"Actionsflow Poll trigger\",\n  \"metaDescription\": \"Poll trigger is triggered when new items of a rest API are detected.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Poll trigger is triggered when new items of a rest API are detected.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/actionsflow/actionsflow/blob/main/packages/actionsflow/src/triggers/poll.ts\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"View trigger on Github\")), mdx(\"h1\", {\n    \"id\": \"usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#usage\",\n    \"aria-label\": \"usage permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Usage\"), mdx(\"p\", null, \"Watching new item in API \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://jsonplaceholder.typicode.com/posts\"), \" response:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://jsonplaceholder.typicode.com/posts\\n    deduplicationKey: id\\n\")), mdx(\"p\", null, \"Or, multiple urls:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url:\\n      - https://jsonplaceholder.typicode.com/comments?postId=1\\n      - https://jsonplaceholder.typicode.com/comments?postId=2\\n    deduplicationKey: id\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note, the response structure should be same if using multiple urls\")), mdx(\"h2\", {\n    \"id\": \"options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#options\",\n    \"aria-label\": \"options permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Options\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"url\"), \", required, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string[]\"), \", the polling API URL, for example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://jsonplaceholder.typicode.com/posts\"), \", if using multiple urls the response structure should be same.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemsPath\"), \", optional, if the API's returned JSON is not a list and is instead an object (maybe paginated), you can configure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemsPath\"), \" as the key that contains the results. Example: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"results\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"items\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.items\"), \", etc... The default value is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \", which means the API's response should be a list. If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemsPath\"), \" is not specified and the API's response is an object, the object will be converted to an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"items\"), \" array.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deduplicationKey\"), \", optional. The poll trigger deduplicates the array we see each poll against the id key. If the id key does not exist, you should specify an alternative unique key to deduplicate, you can use path format, like: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.id\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"item.data.key\"), \", If neither are supplied, we fallback to looking for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"key\"), \", if neither are supplied, we will hash the item, and generate a unique key\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldIncludeRawBody\"), \", optional, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boolean\"), \", the default value is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", then you can use the whole body as you need. For example:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://jsonplaceholder.typicode.com/posts\\n    shouldIncludeBody: true\\n    config:\\n      limit: 5\\njobs:\\n  print:\\n    name: Print\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Print Outputs\\n        env:\\n          rawBody: ${{ toJSON(on.poll.outputs.raw__body) }}\\n        run: |\\n          echo \\\"rawBody: $rawBody\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldIncludeRequest\"), \", optional, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boolean\"), \", the default value is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", then the request config will be added to the item's property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__request\"), \", for example:\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://jsonplaceholder.typicode.com/posts\\n    shouldIncludeRequest: true\\n    config:\\n      limit: 5\\njobs:\\n  print:\\n    name: Print\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Print Outputs\\n        env:\\n          __request: ${{ toJSON(on.poll.outputs.__request) }}\\n        run: |\\n          echo \\\"__request: $__request\\\"\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"__request\"), \" will be like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \" { \\\"url\\\": \\\"https://jsonplaceholder.typicode.com/posts\\\" }\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestConfig\"), \", optional, we use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/axios/axios\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Axios\"), \" for polling data, so your can pass all params that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/axios/axios#request-config\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"axios supported\"), \". For example:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://jsonplaceholder.typicode.com/posts\\n    requestConfig:\\n      method: POST\\n      headers:\\n        Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requestConfig.axios-retry\"), \", optional, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/softonic/axios-retry\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"axios-retry\")), \" params, you can configure the number of times to retry, for example:\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://fb067a39e21871a3c38f8569d28d5aba.m.pipedream.net/\\n    requestConfig:\\n      axios-retry:\\n        retries: 3\\njobs:\\n  print:\\n    name: Print\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Print Outputs\\n        env:\\n          title: ${{ on.poll.outputs.id }}\\n        run: |\\n          echo \\\"title: $title\\\"\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../workflow/#ontriggerconfig\"\n  }), \"General Config for Actionsflow Trigger\"), \" for more customization.\")), mdx(\"h2\", {\n    \"id\": \"outputs\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#outputs\",\n    \"aria-label\": \"outputs permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Outputs\"), mdx(\"p\", null, \"Poll trigger's outputs will be the item of the API results\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note, is you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shouldIncludeRawBody\"), \", then you will get \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"raw__body\"), \" for the whole raw body\")), mdx(\"p\", null, \"An outputs example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"userId\\\": 1,\\n  \\\"id\\\": 1,\\n  \\\"title\\\": \\\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\\\",\\n  \\\"body\\\": \\\"quia et suscipit\\\\nsuscipit recusandae consequuntur expedita et cum\\\\nreprehenderit molestiae ut ut quas totam\\\\nnostrum rerum est autem sunt rem eveniet architecto\\\"\\n}\\n\")), mdx(\"p\", null, \"You can use the outputs like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"on:\\n  poll:\\n    url: https://jsonplaceholder.typicode.com/posts\\n    config:\\n      limit: 5\\njobs:\\n  print:\\n    name: Print\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Print Outputs\\n        env:\\n          title: ${{ on.poll.outputs.title }}\\n          body: ${{ on.poll.outputs.body }}\\n        run: |\\n          echo \\\"title: $title\\\"\\n          echo \\\"body: $body\\\"\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#usage","title":"Usage","items":[{"url":"#options","title":"Options"},{"url":"#outputs","title":"Outputs"}]}]},"parent":{"__typename":"File","relativePath":"docs/triggers/poll.md"},"frontmatter":{"title":"Poll","metaTitle":"Actionsflow Poll trigger","metaDescription":"Poll trigger is triggered when new items of a rest API are detected.","githubEditLink":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/about/","title":"About"}}},{"node":{"fields":{"slug":"/actions/","title":"Explore Actions"}}},{"node":{"fields":{"slug":"/compare/","title":"Compare with Zapier & IFTTT"}}},{"node":{"fields":{"slug":"/concepts/","title":"Core Concepts"}}},{"node":{"fields":{"slug":"/contributing/","title":"Contributing Guide"}}},{"node":{"fields":{"slug":"/creating-triggers/","title":"Creating Triggers"}}},{"node":{"fields":{"slug":"/faqs/","title":"FAQs"}}},{"node":{"fields":{"slug":"/getting-started/","title":"Getting Started"}}},{"node":{"fields":{"slug":"/","title":"Introduction"}}},{"node":{"fields":{"slug":"/reference/","title":"Reference"}}},{"node":{"fields":{"slug":"/self-hosted/","title":"Self-Hosted Introduction"}}},{"node":{"fields":{"slug":"/triggers/","title":"Triggers"}}},{"node":{"fields":{"slug":"/upgrade/","title":"Upgrade"}}},{"node":{"fields":{"slug":"/webhook/","title":"Webhook Syntax"}}},{"node":{"fields":{"slug":"/workflow/","title":"Workflow Syntax"}}},{"node":{"fields":{"slug":"/creating-triggers/creating-a-generic-trigger/","title":"Generic Trigger"}}},{"node":{"fields":{"slug":"/creating-triggers/creating-a-local-trigger/","title":"Local Trigger"}}},{"node":{"fields":{"slug":"/reference/actionsflow-api/","title":"Package actionsflow API"}}},{"node":{"fields":{"slug":"/reference/cli/","title":"CLI API"}}},{"node":{"fields":{"slug":"/reference/github-workflow/","title":"Actionsflow Github Workflows"}}},{"node":{"fields":{"slug":"/reference/trigger-api/","title":"Trigger API"}}},{"node":{"fields":{"slug":"/reference/trigger-helpers/","title":"Trigger Helpers API"}}},{"node":{"fields":{"slug":"/triggers/email/","title":"Email"}}},{"node":{"fields":{"slug":"/triggers/graphql/","title":"Graphql"}}},{"node":{"fields":{"slug":"/triggers/poll/","title":"Poll"}}},{"node":{"fields":{"slug":"/triggers/rss/","title":"RSS"}}},{"node":{"fields":{"slug":"/triggers/script/","title":"Script"}}},{"node":{"fields":{"slug":"/triggers/webhook/","title":"Webhook"}}},{"node":{"fields":{"slug":"/reference/actionsflow-core-api/","title":"Package actionsflow-core API"}}},{"node":{"fields":{"slug":"/triggers/aws_sns/","title":"Aws_sns"}}},{"node":{"fields":{"slug":"/triggers/google_form/","title":"Google_form"}}},{"node":{"fields":{"slug":"/triggers/instagram/","title":"Instagram"}}},{"node":{"fields":{"slug":"/triggers/npm/","title":"Npm"}}},{"node":{"fields":{"slug":"/triggers/reddit/","title":"Reddit"}}},{"node":{"fields":{"slug":"/triggers/slack/","title":"Slack"}}},{"node":{"fields":{"slug":"/triggers/telegram_bot/","title":"Telegram_bot"}}},{"node":{"fields":{"slug":"/triggers/trello/","title":"Trello"}}},{"node":{"fields":{"slug":"/triggers/twitter/","title":"Twitter"}}},{"node":{"fields":{"slug":"/triggers/typeform/","title":"Typeform"}}},{"node":{"fields":{"slug":"/triggers/weather/","title":"Weather"}}},{"node":{"fields":{"slug":"/triggers/youtube/","title":"Youtube"}}},{"node":{"fields":{"slug":"/awesome/","title":"Awesome Workflows"}}}]}},"pageContext":{"id":"b18f43ef-4324-5c9b-b620-0f0e898adcbe"}},"staticQueryHashes":["2324354116","2619113677","3374946256"]}